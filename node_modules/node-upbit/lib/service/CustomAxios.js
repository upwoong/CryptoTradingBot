"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const AuthorizationToken_1 = __importDefault(require("./AuthorizationToken"));
class CustomAxios extends AuthorizationToken_1.default {
    constructor(UBIT_ACCESS_KEY, UBIT_SECRET_KEY) {
        super(UBIT_ACCESS_KEY, UBIT_SECRET_KEY);
    }
    getData({ method, url, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default({
                method,
                url,
            });
            return res;
        });
    }
    getAuthData({ method, url, }) {
        const _super = Object.create(null, {
            getAuthorizationTokenNoParam: { get: () => super.getAuthorizationTokenNoParam }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const authorizationToken = _super.getAuthorizationTokenNoParam.call(this);
            const res = yield axios_1.default({
                method,
                url,
                headers: { Authorization: authorizationToken },
            });
            return res;
        });
    }
    getAuthParamData({ method, url, params = {}, }) {
        const _super = Object.create(null, {
            getAuthorizationToken: { get: () => super.getAuthorizationToken }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const { authorizationToken, query } = _super.getAuthorizationToken.call(this, params);
            const res = yield axios_1.default({
                method,
                url: `${url}?${query}`,
                headers: { Authorization: authorizationToken },
            });
            return res;
        });
    }
}
exports.default = CustomAxios;
//# sourceMappingURL=CustomAxios.js.map