"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Constants_1 = __importDefault(require("../Constants"));
const CustomAxios_1 = __importDefault(require("./CustomAxios"));
class ExchangeService extends CustomAxios_1.default {
    constructor(UBIT_ACCESS_KEY, UBIT_SECRET_KEY) {
        super(UBIT_ACCESS_KEY, UBIT_SECRET_KEY);
    }
    getAllAccount() {
        const _super = Object.create(null, {
            getAuthData: { get: () => super.getAuthData }
        });
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield _super.getAuthData.call(this, {
                    method: "GET",
                    url: Constants_1.default.ACCOUNT_URL,
                });
                return data;
            }
            catch (err) {
                const { response: { data }, } = err;
                throw data;
            }
        });
    }
    getOrderChance(coin) {
        const _super = Object.create(null, {
            getAuthParamData: { get: () => super.getAuthParamData }
        });
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield _super.getAuthParamData.call(this, {
                    method: "GET",
                    url: Constants_1.default.ORDER_CHANCE_URL,
                    params: { market: coin },
                });
                return data;
            }
            catch (err) {
                const { response: { data }, } = err;
                throw data;
            }
        });
    }
    getApiKeyStatus() {
        const _super = Object.create(null, {
            getAuthData: { get: () => super.getAuthData }
        });
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield _super.getAuthData.call(this, {
                    method: "GET",
                    url: Constants_1.default.API_KEYS_URL,
                });
                return data;
            }
            catch (err) {
                const { response: { data }, } = err;
                throw data;
            }
        });
    }
}
exports.default = ExchangeService;
//# sourceMappingURL=ExchangeService.js.map