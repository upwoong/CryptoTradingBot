"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Constants_1 = __importDefault(require("../Constants"));
const CustomAxios_1 = __importDefault(require("./CustomAxios"));
class QuoationService extends CustomAxios_1.default {
    constructor() {
        super();
    }
    getMarketAllInfo() {
        const _super = Object.create(null, {
            getData: { get: () => super.getData }
        });
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield _super.getData.call(this, {
                    method: "GET",
                    url: Constants_1.default.MARKET_ALL_URL,
                });
                let returnObj = { KRW: [], BTC: [], USDT: [] };
                data.forEach((item) => {
                    const marketPlace = item.market.split("-")[0];
                    if (marketPlace === "KRW") {
                        returnObj["KRW"].push(item);
                    }
                    else if (marketPlace === "BTC") {
                        returnObj["BTC"].push(item);
                    }
                    else {
                        returnObj["USDT"].push(item);
                    }
                });
                return returnObj;
            }
            catch (err) {
                const { response: { data }, } = err;
                throw data;
            }
        });
    }
    getMinutesCandles({ minutes, marketCoin, count, to, }) {
        const _super = Object.create(null, {
            getData: { get: () => super.getData }
        });
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield _super.getData.call(this, {
                    method: "GET",
                    url: `${Constants_1.default.CANDLES_MINUTES_URL}/${minutes}?market=${marketCoin}&count=${count}${to ? `&to=${to}` : ""}`,
                });
                return data.reverse();
            }
            catch (err) {
                const { response: { data }, } = err;
                throw data;
            }
        });
    }
    getDayCandles({ marketCoin, count, to }) {
        const _super = Object.create(null, {
            getData: { get: () => super.getData }
        });
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield _super.getData.call(this, {
                    method: "GET",
                    url: `${Constants_1.default.CANDLES_DAY_URL}/?market=${marketCoin}&count=${count}${to ? `&to=${to}` : ""}`,
                });
                return data.reverse();
            }
            catch (err) {
                const { response: { data }, } = err;
                throw data;
            }
        });
    }
    getTicker(marketCoinCode) {
        const _super = Object.create(null, {
            getData: { get: () => super.getData }
        });
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield _super.getData.call(this, {
                    method: "GET",
                    url: `${Constants_1.default.TICKER_URL}?markets=${marketCoinCode.join(",")}`,
                });
                return data;
            }
            catch (err) {
                const { response: { data }, } = err;
                throw data;
            }
        });
    }
    getOrderbook(marketCoinCode) {
        const _super = Object.create(null, {
            getData: { get: () => super.getData }
        });
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield _super.getData.call(this, {
                    method: "GET",
                    url: `${Constants_1.default.ORDER_BOOK_URL}?markets=${marketCoinCode.join(",")}`,
                });
                return data;
            }
            catch (err) {
                const { response: { data }, } = err;
                throw data;
            }
        });
    }
}
exports.default = QuoationService;
//# sourceMappingURL=QuoationService.js.map